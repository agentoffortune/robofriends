{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchField","searchChange","type","defaultValue","onChange","Scroll","props","style","overflowY","textAlign","height","display","alignContent","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestRobots","onSearchChange","isPending","filtRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WAceA,G,MAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,4BACrB,6BACE,4BAAKC,GACL,2BAAIC,OCQGI,G,MAbE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAClC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAIvB,OAAO,yBAAKC,UAAU,gBAAgBK,KCDzBK,G,MAXG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,2BACEC,KAAK,SACLb,UAAU,UACVF,KAAK,YACLgB,aAAa,gBACbC,SAAUH,MCADI,EARA,SAACC,GACZ,OACG,yBAAKC,MAAO,CAACC,UAAW,SAAUC,UAAW,SAAUC,OAAQ,QAASC,QAAS,OAAQC,aAAc,WAClGN,EAAMO,WCeHC,E,YAjBX,WAAYR,GAAQ,IAAD,8BACf,4CAAMA,KACDS,MAAQ,CAACC,UAAU,GAFT,E,+EAKDC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,4DAEAG,KAAKb,MAAMO,a,GAdFQ,IAAMC,WCuB5BC,G,kMAGFJ,KAAKb,MAAMkB,oB,+BAGH,IAAD,EACkDL,KAAKb,MAAvDN,EADA,EACAA,YAAayB,EADb,EACaA,eAAgBhC,EAD7B,EAC6BA,OAAQiC,EADrC,EACqCA,UACtCC,EAAalC,EAAOmC,QAAO,SAAAnC,GAC/B,OAAOA,EAAON,KACX0C,cACAC,SAAS9B,EAAY6B,kBAE1B,OAAOH,EACL,uDACA,yBAAKrC,UAAU,gBACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcwB,IACzB,6BAAM,6BACN,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUhC,OAAQkC,W,GArBZN,IAAMC,YA8BTS,eA9CS,SAAChB,GACvB,MAAO,CACLf,YAAae,EAAMiB,aAAahC,YAChCP,OAAQsB,EAAMkB,cAAcxC,OAC5BiC,UAAWX,EAAMkB,cAAcP,UAC/BT,MAAOF,EAAMkB,cAAchB,UAIJ,SAACiB,GAC1B,MAAO,CACLT,eAAgB,SAACU,GAAD,OAAWD,EClBU,CACrChC,KCH+B,sBDI/BkC,QDgBmDD,EAAME,OAAOC,SAChEd,gBAAiB,kBAAMU,GCfQ,SAACA,GAChCA,EAAS,CAAChC,KCLwB,2BDMlCqC,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAChCF,MAAK,SAAAG,GAAK,OAAIT,EAAS,CAAEhC,KCPM,yBDOwBkC,QAASO,OAChEC,OAAM,SAAAC,GAAG,OAAIX,EAAS,CAAEhC,KCPM,wBDOuBkC,QAASS,cD4CtDd,CAA6CR,GG3CxCuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UChBAC,EAAqB,CACvBnD,YAAa,IAYXoD,EAAqB,CACvB1B,WAAW,EACXjC,OAAQ,GACRwB,MAAO,ICPLoC,EAASC,yBACTC,EAAcC,YAAgB,CAACxB,aDNT,WAA0C,IAAzCjB,EAAwC,uDAAlCoC,EAAoBM,EAAc,uDAAP,GAC1D,OAAQA,EAAOvD,MACX,IFR2B,sBESvB,OAAOwD,OAAOC,OAAO,GAAI5C,EAAO,CAACf,YAAayD,EAAOrB,UACzD,QACI,OAAOrB,ICCgCkB,cDStB,WAA0C,IAAzClB,EAAwC,uDAAlCqC,EAAoBK,EAAc,uDAAP,GAC3D,OAAQA,EAAOvD,MACX,IFrB8B,yBEsB1B,OAAOwD,OAAOC,OAAO,GAAI5C,EAAO,CAACW,WAAW,IAChD,IFtB8B,yBEuB1B,OAAOgC,OAAOC,OAAO,GAAI5C,EAAO,CAACtB,OAAQgE,EAAOrB,QAASV,WAAW,IACxE,IFvB6B,wBEwBzB,OAAOgC,OAAOC,OAAO,GAAI5C,EAAO,CAACE,MAAOwC,EAAOrB,QAASV,WAAW,IAEnE,QACA,OAAOX,MClBb6C,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAIxEW,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAAOA,GAAO,kBAAC,EAAD,OAAoBM,SAASC,eAAe,SFgH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.dcaa09dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?set=set3&size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardArray = robots.map((user, i) => {\r\n    return (\r\n      <Card \r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div className='container tc'>{cardArray}</div>;\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./SearchBox.css\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      className='textbox'\r\n      name=\"searchBox\"\r\n      defaultValue=\"Search Robots\"\r\n      onChange={searchChange}\r\n    />\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n       <div style={{overflowY: 'scroll', textAlign: 'center', height: '500px', display: 'flex', alignContent: 'center' }}>\r\n           {props.children}\r\n    </div> \r\n    )\r\n    \r\n}\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {hasError: false}\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops! Something went wrong!</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  \r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const {searchField, onSearchChange, robots, isPending} = this.props;\r\n    const filtRobots = robots.filter(robots => {\r\n      return robots.name\r\n        .toLowerCase()\r\n        .includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ?\r\n      <h1>Loading, please wait...</h1> :\r\n      <div className='container tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <br /><br />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filtRobots} />\r\n          </ErrorBoundary>\r\n          \r\n        </Scroll>\r\n        \r\n      </div>\r\n    \r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants.js\";\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => {return response.json()})\r\n      .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\r\n      .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n    \r\n};","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants.js\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload} );\r\n        default: \r\n            return state;\r\n    }\r\n}  \r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true} )\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false} );\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false} );\r\n                \r\n            default: \r\n            return state;\r\n    }\r\n}  ","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\r\nimport {createLogger} from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\n\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}