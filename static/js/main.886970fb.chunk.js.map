{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchField","searchChange","type","defaultValue","onChange","Scroll","props","style","overflowY","textAlign","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filtRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAceA,G,MAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,4BACrB,6BACE,4BAAKC,GACL,2BAAIC,OCQGI,G,MAbE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAClC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAIvB,OAAO,yBAAKC,UAAU,aAAaK,KCDtBK,G,MAXG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,2BACEC,KAAK,SACLb,UAAU,UACVF,KAAK,YACLgB,aAAa,gBACbC,SAAUH,MCADI,EARA,SAACC,GACZ,OACG,yBAAKC,MAAO,CAACC,UAAW,SAAUC,UAAW,SAAUC,OAAQ,UAC1DJ,EAAMK,WCeHC,E,YAjBX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CAACC,UAAU,GAFT,E,+EAKDC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,4DAEAG,KAAKX,MAAMK,a,GAdFQ,IAAMC,WC6CnBC,G,kBAvCb,aAAe,IAAD,8BACZ,+CAYFC,eAAiB,SAAAC,GACf,EAAKL,SAAS,CAAElB,YAAauB,EAAMC,OAAOC,SAZ1C,EAAKZ,MAAQ,CACXpB,OAAQ,GACRO,YAAa,IAJH,E,iFAOO,IAAD,OAClB0B,MAAM,8CAA8CC,MAAK,SAAAC,GACvD,OAAOA,EAASC,OAAOF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEzB,OAAQqC,Y,+BAOvD,IAAD,EACwBb,KAAKJ,MAA5BpB,EADD,EACCA,OAAQO,EADT,EACSA,YACV+B,EAAatC,EAAOuC,QAAO,SAAAvC,GAC/B,OAAOA,EAAON,KACX8C,cACAC,SAASlC,EAAYiC,kBAE1B,OAAQxC,EAEN,yBAAKJ,UAAU,aACb,2CACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKK,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU7B,OAAQsC,OANxB,2D,GAzBYZ,IAAMC,YCKJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.886970fb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?set=set3&size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardArray = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div className='container'>{cardArray}</div>;\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./SearchBox.css\";\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      className='textbox'\r\n      name=\"searchBox\"\r\n      defaultValue=\"Search Robots\"\r\n      onChange={searchChange}\r\n    />\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n       <div style={{overflowY: 'scroll', textAlign: 'center', height: '500px' }}>\r\n           {props.children}\r\n    </div> \r\n    )\r\n    \r\n}\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {hasError: false}\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops! Something went wrong!</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n      return response.json().then(users => this.setState({ robots: users }))\r\n      \r\n    })\r\n  }\r\n  onSearchChange = event => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n  render() {\r\n    const { robots, searchField} = this.state;\r\n    const filtRobots = robots.filter(robots => {\r\n      return robots.name\r\n        .toLowerCase()\r\n        .includes(searchField.toLowerCase());\r\n    });\r\n    return !robots ?\r\n      <h1>Loading, please wait...</h1> :\r\n      <div className='container'>\r\n        <h1>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filtRobots} />\r\n          </ErrorBoundary>\r\n          \r\n        </Scroll>\r\n        \r\n      </div>\r\n    \r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}